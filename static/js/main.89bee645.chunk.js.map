{"version":3,"sources":["components/VideoEditor/ControlBar.js","components/VideoEditor/VideoEditor.js","App.js","serviceWorker.js","index.js"],"names":["ControlBar","props","getNavigationPosition","currentTime","duration","navigatorOffset","startAt","navigatorPosition","react_default","a","createElement","className","style","width","concat","left","js_default","step","maxValue","minValue","onChangeStart","onChangeComplete","value","min","max","endAt","onChange","VIDEO","videoReducer","state","action","type","Object","objectSpread","isPlaying","currentPosition","startOffset","payload","endOffset","VideoEditor","_ref","video","setting","onOk","player","useRef","_useReducer","useReducer","autoplay","_useReducer2","slicedToArray","videoState","videoDispatch","useEffect","current","videojs","src","ready","play","on","paused","pause","ref","data-vjs-player","VideoEditor_ControlBar","onClick","defaultProps","fluid","loop","controls","App","_useState","useState","_useState2","setVideo","_useState3","_useState4","progress","accept","e","URL","createObjectURL","target","files","components_VideoEditor_VideoEditor","console","log","id","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.89bee645.chunk.js","sourcesContent":["import React from 'react'\nimport { number, func } from 'prop-types'\nimport InputRange from 'react-input-range'\nimport './styles/controlbar.scss'\n\nconst ControlBar = (props) => {\n  const getNavigationPosition = (currentTime, duration) => {\n    return (currentTime / duration) * 100\n  }\n  const navigatorOffset = getNavigationPosition(props.startAt, props.duration)\n  const navigatorPosition = getNavigationPosition(props.currentTime, props.duration) - navigatorOffset\n  \n  return (\n    <div className=\"video-container__control-bar\">\n      <div\n        className=\"video-container__control-bar__navigator\"\n        style={{ width: `${navigatorPosition}%`, left: `${navigatorOffset}%`}}>\n      </div>\n      <InputRange\n        step={0.2}\n        maxValue={props.duration}\n        minValue={0}\n        onChangeStart={props.onChangeStart}\n        onChangeComplete={props.onChangeComplete}\n        value={{ min: props.startAt, max: props.endAt }}\n        onChange={props.onChange}\n      />\n    </div>\n  )\n}\n\nControlBar.propTypes = {\n  duration: number.isRequired,\n  onChange: func.isRequired,\n  startAt: number.isRequired,\n  endAt: number.isRequired,\n  currentTime: number.isRequired,\n  onChangeStart: func,\n  onChangeComplete: func,\n}\n\nexport default ControlBar\n","import React, { useEffect, useRef, useReducer } from 'react'\nimport { number, string, object, func } from 'prop-types'\nimport videojs from 'video.js'\nimport ControlBar from './ControlBar'\nimport './styles/video_player.scss'\n\nconst VIDEO = {\n  play: 'play',\n  pause: 'pause',\n  stop: 'stop',\n  goto: 'goto',\n  setStartOffset: 'set/start_offset',\n  setEndOffset: 'set/end_offset',\n  setDuration: 'set/duration'\n}\n\nconst videoReducer = (state, action) => {\n  switch(action.type) {\n    case VIDEO.play:\n      return {\n        ...state,\n        isPlaying: true\n      }\n    case VIDEO.pause:\n      return {\n        ...state,\n        isPlaying: false\n      }\n    case VIDEO.stop:\n      return {\n        ...state,\n        isPlaying: false,\n        currentPosition: state.startOffset\n      }\n    case VIDEO.setStartOffset:\n      return {\n        ...state,\n        startOffset: action.payload\n      }\n    case VIDEO.setEndOffset:\n      return {\n        ...state,\n        endOffset: action.payload\n      }\n    case VIDEO.goto:\n      return {\n        ...state,\n        currentPosition: action.payload\n      }\n    case VIDEO.setDuration:\n      return {\n        ...state,\n        duration: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nconst VideoEditor = ({ video, startAt, endAt, setting, onOk }) => {\n  let player = useRef()\n  const [videoState, videoDispatch] = useReducer(videoReducer, {\n    isPlaying: setting.autoplay,\n    currentPosition: startAt,\n    startOffset: startAt,\n    endOffset: endAt,\n    duration: 0,\n  }) \n\n  const setupPlayer = () => {\n    // setup\n    player.current = videojs(player.current, setting)\n\n    player.current.src({ src: video, type: 'video/mp4' })\n    \n    // set start offset\n    player.current.ready(() => {\n      player.current.currentTime(startAt)\n      player.current.play()\n    })\n\n    // set video duration and end offset when video player ready to give an information\n    player.current.on('loadedmetadata', () => {\n      videoDispatch({ type: VIDEO.setDuration, payload: player.current.duration() })\n      if (typeof videoState.endOffset === 'undefined') {\n        videoDispatch({ type: VIDEO.setEndOffset, payload: player.current.duration() })\n      }\n    })\n    \n    // update current time state\n    player.current.on('timeupdate', () => {\n      videoDispatch({ type: VIDEO.goto, payload: player.current.currentTime() })\n    })\n  }\n\n  // first time setup\n  useEffect(() => {\n    setupPlayer()\n  }, [])\n\n  // update current time for video\n  useEffect(() => {\n    player.current.currentTime(videoState.startOffset)\n  }, [ videoState.startOffset ])\n\n  // sync video state\n  useEffect(() => {\n    // when video played over the end offset, it's going to start back at start offset\n    if (typeof videoState.endOffset !== 'undefined' && videoState.currentPosition > videoState.endOffset) {\n      player.current.currentTime(videoState.startOffset)\n    }\n    \n    // sync video playing state\n    if (videoState.isPlaying && player.current.paused()) {\n      player.current.play()\n    } else if (!videoState.isPlaying && !player.current.paused()) {\n      player.current.pause()\n    }\n  }, [ videoState ])\n\n  // change currentPosition in video when currentPosition state change\n  useEffect(() => {\n    player.current.currentTime(videoState.startOffset)\n  }, [ videoState.startOffset ])\n\n  useEffect(() => {\n    player.current.currentTime(videoState.endOffset)\n  }, [ videoState.endOffset ])\n\n  return (\n    <div>\n      <div className=\"video-container\">\n        <video ref={player} className=\"video-js vjs-default-skin\" data-vjs-player type=\"video/mp4\">\n          Your browser does not support the video tag.\n        </video>\n        {\n          videoState.endOffset && videoState.duration !== 0 && (\n            <ControlBar\n              duration={videoState.duration}\n              currentTime={videoState.currentPosition}\n              startAt={videoState.startOffset}\n              endAt={videoState.endOffset}\n              onChangeStart={value => {\n                videoDispatch({ type: VIDEO.pause })\n              }}\n              onChangeComplete={value => {\n                player.current.currentTime(videoState.startOffset)\n                videoDispatch({ type: VIDEO.play })\n              }}\n              onChange={value => {\n                if (value.min !== videoState.startOffset) {\n                  videoDispatch({ type: VIDEO.setStartOffset, payload: value.min })\n                } else if (value.max !== videoState.endOffset) {\n                  videoDispatch({ type: VIDEO.setEndOffset, payload: value.max })\n                }\n              }}\n            />\n          )\n        }\n      </div>\n      <button onClick={() => onOk(videoState)}>OK</button>\n    </div>\n  )\n}\n\nVideoEditor.propTypes = {\n  video: string.isRequired,\n  onOk: func,\n  startAt: number,\n  endAt: number,\n  setting: object,\n}\n\nVideoEditor.defaultProps = {\n  startAt: 0,\n  onOk: () => {},\n  setting: {\n    fluid: true,\n    autoplay: true,\n    loop: true,\n    controls: false,\n  }\n}\n\nexport default VideoEditor\n","import React, { useState } from \"react\";\nimport VideoEditor from \"./components/VideoEditor\";\nimport \"./app.css\";\n\nfunction trimVideo({ file, startAt, endAt, onProcessing }) {\n  return new Promise((resolve, reject) => {\n    let video = document.createElement(\"video\");\n    let images = [];\n    let canvas = document.createElement(\"canvas\");\n    let preview = document.getElementById(\"preview-video\");\n    let ctx = canvas.getContext(\"2d\");\n    const mediaStream = canvas.captureStream(25);\n    preview.srcObject = mediaStream;\n\n    function initCanvas(e) {\n      canvas.width = this.videoWidth;\n      canvas.height = this.videoHeight;\n    }\n\n    function onEnd(e) {}\n\n    function saveFrame(blob) {\n      images.push(blob);\n    }\n\n    function drawFrame(e) {\n      this.pause();\n      ctx.drawImage(video, 0, 0);\n      onProcessing(((this.currentTime / endAt) * 100).toFixed(2));\n      if (this.currentTime < endAt) {\n        this.play();\n      } else {\n        onEnd();\n      }\n    }\n\n    video.muted = true;\n    video.addEventListener(\"loadedmetadata\", initCanvas, false);\n    video.addEventListener(\"timeupdate\", drawFrame, false);\n    video.src = file;\n    video.currentTime = startAt;\n    video.play();\n  });\n}\n\nfunction App() {\n  const [video, setVideo] = useState();\n  const [progress, setProgress] = useState(0);\n\n  return (\n    <div className=\"app\">\n      <h1>Client side Video Trimmer (Experimental)</h1>\n      <div>\n        <h2>1. Choose video file to upload (support only mp4)</h2>\n        <input\n          type=\"file\"\n          accept=\"video/mp4\"\n          onChange={e => setVideo(URL.createObjectURL(e.target.files[0]))}\n        />\n      </div>\n      <div>\n        <h2>2. Trim Video</h2>\n        {video && <VideoEditor video={video} onOk={console.log} />}\n      </div>\n      <div id=\"progress\">{progress}%</div>\n      <video id=\"preview-video\" width={600} height={500} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}